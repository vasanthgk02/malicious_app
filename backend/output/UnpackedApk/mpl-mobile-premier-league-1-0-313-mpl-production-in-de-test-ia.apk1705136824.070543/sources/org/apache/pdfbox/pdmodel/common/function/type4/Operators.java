package org.apache.pdfbox.pdmodel.common.function.type4;

import com.razorpay.AnalyticsConstants;
import io.hansel.core.criteria.HSLCriteriaBuilder;
import java.util.HashMap;
import java.util.Map;
import org.apache.pdfbox.pdfparser.BaseParser;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Abs;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Add;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Atan;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Ceiling;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Cos;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Cvi;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Cvr;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Div;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Exp;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Floor;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.IDiv;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Ln;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Log;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Mod;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Mul;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Neg;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Round;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Sin;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Sqrt;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Sub;
import org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators.Truncate;
import org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators.And;
import org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators.Bitshift;
import org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators.False;
import org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators.Not;
import org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators.Or;
import org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators.True;
import org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators.Xor;
import org.apache.pdfbox.pdmodel.common.function.type4.ConditionalOperators.If;
import org.apache.pdfbox.pdmodel.common.function.type4.ConditionalOperators.IfElse;
import org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators.Eq;
import org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators.Ge;
import org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators.Gt;
import org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators.Le;
import org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators.Lt;
import org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators.Ne;
import org.apache.pdfbox.pdmodel.common.function.type4.StackOperators.Copy;
import org.apache.pdfbox.pdmodel.common.function.type4.StackOperators.Dup;
import org.apache.pdfbox.pdmodel.common.function.type4.StackOperators.Exch;
import org.apache.pdfbox.pdmodel.common.function.type4.StackOperators.Index;
import org.apache.pdfbox.pdmodel.common.function.type4.StackOperators.Pop;
import org.apache.pdfbox.pdmodel.common.function.type4.StackOperators.Roll;

public class Operators {
    public static final Operator ABS = new Abs();
    public static final Operator ADD = new Add();
    public static final Operator AND = new And();
    public static final Operator ATAN = new Atan();
    public static final Operator BITSHIFT = new Bitshift();
    public static final Operator CEILING = new Ceiling();
    public static final Operator COPY = new Copy();
    public static final Operator COS = new Cos();
    public static final Operator CVI = new Cvi();
    public static final Operator CVR = new Cvr();
    public static final Operator DIV = new Div();
    public static final Operator DUP = new Dup();
    public static final Operator EQ = new Eq();
    public static final Operator EXCH = new Exch();
    public static final Operator EXP = new Exp();
    public static final Operator FALSE = new False();
    public static final Operator FLOOR = new Floor();
    public static final Operator GE = new Ge();
    public static final Operator GT = new Gt();
    public static final Operator IDIV = new IDiv();
    public static final Operator IF = new If();
    public static final Operator IFELSE = new IfElse();
    public static final Operator INDEX = new Index();
    public static final Operator LE = new Le();
    public static final Operator LN = new Ln();
    public static final Operator LOG = new Log();
    public static final Operator LT = new Lt();
    public static final Operator MOD = new Mod();
    public static final Operator MUL = new Mul();
    public static final Operator NE = new Ne();
    public static final Operator NEG = new Neg();
    public static final Operator NOT = new Not();
    public static final Operator OR = new Or();
    public static final Operator POP = new Pop();
    public static final Operator ROLL = new Roll();
    public static final Operator ROUND = new Round();
    public static final Operator SIN = new Sin();
    public static final Operator SQRT = new Sqrt();
    public static final Operator SUB = new Sub();
    public static final Operator TRUE = new True();
    public static final Operator TRUNCATE = new Truncate();
    public static final Operator XOR = new Xor();
    public Map<String, Operator> operators;

    public Operators() {
        HashMap hashMap = new HashMap();
        this.operators = hashMap;
        hashMap.put("add", ADD);
        this.operators.put("abs", ABS);
        this.operators.put("atan", ATAN);
        this.operators.put("ceiling", CEILING);
        this.operators.put("cos", COS);
        this.operators.put("cvi", CVI);
        this.operators.put("cvr", CVR);
        this.operators.put("div", DIV);
        this.operators.put("exp", EXP);
        this.operators.put("floor", FLOOR);
        this.operators.put("idiv", IDIV);
        this.operators.put("ln", LN);
        this.operators.put(AnalyticsConstants.LOG, LOG);
        this.operators.put("mod", MOD);
        this.operators.put("mul", MUL);
        this.operators.put("neg", NEG);
        this.operators.put("round", ROUND);
        this.operators.put("sin", SIN);
        this.operators.put("sqrt", SQRT);
        this.operators.put("sub", SUB);
        this.operators.put("truncate", TRUNCATE);
        this.operators.put("and", AND);
        this.operators.put("bitshift", BITSHIFT);
        this.operators.put("eq", EQ);
        this.operators.put(BaseParser.FALSE, FALSE);
        this.operators.put("ge", GE);
        this.operators.put("gt", GT);
        this.operators.put("le", LE);
        this.operators.put("lt", LT);
        this.operators.put("ne", NE);
        this.operators.put(HSLCriteriaBuilder.NOT, NOT);
        this.operators.put("or", OR);
        this.operators.put(BaseParser.TRUE, TRUE);
        this.operators.put("xor", XOR);
        this.operators.put("if", IF);
        this.operators.put("ifelse", IFELSE);
        this.operators.put("copy", COPY);
        this.operators.put("dup", DUP);
        this.operators.put("exch", EXCH);
        this.operators.put("index", INDEX);
        this.operators.put("pop", POP);
        this.operators.put("roll", ROLL);
    }

    public Operator getOperator(String str) {
        return this.operators.get(str);
    }
}
