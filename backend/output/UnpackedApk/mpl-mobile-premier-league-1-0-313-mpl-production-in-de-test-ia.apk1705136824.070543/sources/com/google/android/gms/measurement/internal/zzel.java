package com.google.android.gms.measurement.internal;

import android.content.Context;
import com.freshchat.consumer.sdk.beans.config.DefaultRemoteConfig;
import com.freshchat.consumer.sdk.beans.config.DefaultUserEventsConfig;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzhe;
import com.google.android.gms.internal.measurement.zzho;
import com.google.firebase.perf.config.RemoteConfigManager;
import com.mpl.androidapp.updater.util.UpdaterConstant;
import com.squareup.picasso.NetworkRequestHandler;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import org.eclipse.paho.client.mqttv3.MqttAsyncClient;

@VisibleForTesting
/* compiled from: com.google.android.gms:play-services-measurement-impl@@20.1.2 */
public final class zzel {
    public static final zzek zzA;
    public static final zzek zzB;
    public static final zzek zzC;
    public static final zzek zzD;
    public static final zzek zzE;
    public static final zzek zzF;
    public static final zzek zzG;
    public static final zzek zzH;
    public static final zzek zzI;
    public static final zzek zzJ;
    public static final zzek zzK = zza("measurement.test.string_flag", "---", "---", zzbq.zza);
    public static final zzek zzL;
    public static final zzek zzM;
    public static final zzek zzN;
    public static final zzek zzO;
    public static final zzek zzP;
    public static final zzek zzQ;
    public static final zzek zzR;
    public static final zzek zzS;
    public static final zzek zzT;
    public static final zzek zzU;
    public static final zzek zzV;
    public static final zzek zzW;
    public static final zzek zzX;
    public static final zzek zzY;
    public static final zzek zzZ;
    public static final zzek zza;
    public static final zzek zzaA;
    public static final zzek zzaB;
    public static final zzek zzaC;
    public static final zzek zzaD;
    public static final zzek zzaE;
    public static final zzek zzaF;
    public static final zzek zzaG;
    public static final zzek zzaH;
    public static final zzek zzaI;
    public static final zzek zzaJ;
    public static final zzek zzaK;
    public static final zzek zzaL;
    public static final zzek zzaM;
    public static final zzek zzaN;
    public static final List zzaO = Collections.synchronizedList(new ArrayList());
    public static final zzek zzaa;
    public static final zzek zzab;
    public static final zzek zzac;
    public static final zzek zzad;
    public static final zzek zzae;
    public static final zzek zzaf;
    public static final zzek zzah;
    public static final zzek zzai;
    public static final zzek zzal;
    public static final zzek zzam;
    public static final zzek zzan;
    public static final zzek zzao;
    public static final zzek zzap;
    public static final zzek zzaq;
    public static final zzek zzar;
    public static final zzek zzas;
    public static final zzek zzat;
    public static final zzek zzau;
    public static final zzek zzav;
    public static final zzek zzaw;
    public static final zzek zzax;
    public static final zzek zzay;
    public static final zzek zzaz;
    public static final zzek zzb;
    public static final zzek zzc;
    public static final zzek zzd = zza("measurement.config.url_scheme", NetworkRequestHandler.SCHEME_HTTPS, NetworkRequestHandler.SCHEME_HTTPS, zzbm.zza);
    public static final zzek zze = zza("measurement.config.url_authority", "app-measurement.com", "app-measurement.com", zzby.zza);
    public static final zzek zzf;
    public static final zzek zzg;
    public static final zzek zzh;
    public static final zzek zzi;
    public static final zzek zzj;
    public static final zzek zzk;
    public static final zzek zzl;
    public static final zzek zzm;
    public static final zzek zzn;
    public static final zzek zzo;
    public static final zzek zzp = zza("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a", zzdw.zza);
    public static final zzek zzq;
    public static final zzek zzr;
    public static final zzek zzs;
    public static final zzek zzt;
    public static final zzek zzu;
    public static final zzek zzv;
    public static final zzek zzw;
    public static final zzek zzx;
    public static final zzek zzy;
    public static final zzek zzz;

    static {
        Collections.synchronizedSet(new HashSet());
        Long valueOf = Long.valueOf(MqttAsyncClient.DISCONNECT_TIMEOUT);
        zza = zza("measurement.ad_id_cache_time", valueOf, valueOf, zzax.zza);
        Long valueOf2 = Long.valueOf(86400000);
        zzb = zza("measurement.monitoring.sample_period_millis", valueOf2, valueOf2, zzbi.zza);
        Long valueOf3 = Long.valueOf(3600000);
        zzc = zza("measurement.config.cache_time", valueOf2, valueOf3, zzba.zza);
        Integer valueOf4 = Integer.valueOf(100);
        zzf = zza("measurement.upload.max_bundles", valueOf4, valueOf4, zzck.zza);
        Integer valueOf5 = Integer.valueOf(65536);
        zzg = zza("measurement.upload.max_batch_size", valueOf5, valueOf5, zzcw.zza);
        zzh = zza("measurement.upload.max_bundle_size", valueOf5, valueOf5, zzdi.zza);
        Integer valueOf6 = Integer.valueOf(1000);
        zzi = zza("measurement.upload.max_events_per_bundle", valueOf6, valueOf6, zzdu.zza);
        Integer valueOf7 = Integer.valueOf(UpdaterConstant.APK_MIN_VERSION_CODE_ID);
        zzj = zza("measurement.upload.max_events_per_day", valueOf7, valueOf7, zzee.zza);
        zzk = zza("measurement.upload.max_error_events_per_day", valueOf6, valueOf6, zzbt.zza);
        Integer valueOf8 = Integer.valueOf(50000);
        zzl = zza("measurement.upload.max_public_events_per_day", valueOf8, valueOf8, zzce.zza);
        Integer valueOf9 = Integer.valueOf(10000);
        zzm = zza("measurement.upload.max_conversions_per_day", valueOf9, valueOf9, zzcp.zza);
        Integer valueOf10 = Integer.valueOf(10);
        zzn = zza("measurement.upload.max_realtime_events_per_day", valueOf10, valueOf10, zzda.zza);
        zzo = zza("measurement.store.max_stored_events_per_app", valueOf7, valueOf7, zzdl.zza);
        Long valueOf11 = Long.valueOf(43200000);
        zzq = zza("measurement.upload.backoff_period", valueOf11, valueOf11, zzef.zza);
        zzr = zza("measurement.upload.window_interval", valueOf3, valueOf3, zzeg.zza);
        zzs = zza("measurement.upload.interval", valueOf3, valueOf3, zzay.zza);
        zzt = zza("measurement.upload.realtime_upload_interval", valueOf, valueOf, zzaz.zza);
        Long valueOf12 = Long.valueOf(1000);
        zzu = zza("measurement.upload.debug_upload_interval", valueOf12, valueOf12, zzbb.zza);
        Long valueOf13 = Long.valueOf(500);
        zzv = zza("measurement.upload.minimum_delay", valueOf13, valueOf13, zzbc.zza);
        Long valueOf14 = Long.valueOf(60000);
        zzw = zza("measurement.alarm_manager.minimum_interval", valueOf14, valueOf14, zzbd.zza);
        zzx = zza("measurement.upload.stale_data_deletion_interval", valueOf2, valueOf2, zzbe.zza);
        Long valueOf15 = Long.valueOf(604800000);
        zzy = zza("measurement.upload.refresh_blacklisted_config_interval", valueOf15, valueOf15, zzbf.zza);
        Long valueOf16 = Long.valueOf(DefaultUserEventsConfig.MAX_DELAY_IN_MILLIS_UNTIL_UPLOAD);
        zzz = zza("measurement.upload.initial_upload_delay_time", valueOf16, valueOf16, zzbg.zza);
        Long valueOf17 = Long.valueOf(DefaultRemoteConfig.SESSION_TIMEOUT_DURATION);
        zzA = zza("measurement.upload.retry_time", valueOf17, valueOf17, zzbh.zza);
        Integer valueOf18 = Integer.valueOf(6);
        zzB = zza("measurement.upload.retry_count", valueOf18, valueOf18, zzbj.zza);
        Long valueOf19 = Long.valueOf(2419200000L);
        zzC = zza("measurement.upload.max_queue_time", valueOf19, valueOf19, zzbk.zza);
        Integer valueOf20 = Integer.valueOf(4);
        zzD = zza("measurement.lifetimevalue.max_currency_tracked", valueOf20, valueOf20, zzbl.zza);
        Integer valueOf21 = Integer.valueOf(200);
        zzE = zza("measurement.audience.filter_result_max_count", valueOf21, valueOf21, zzbn.zza);
        Integer valueOf22 = Integer.valueOf(25);
        zzF = zza("measurement.upload.max_public_user_properties", valueOf22, valueOf22, null);
        Integer valueOf23 = Integer.valueOf(500);
        zzG = zza("measurement.upload.max_event_name_cardinality", valueOf23, valueOf23, null);
        zzH = zza("measurement.upload.max_public_event_params", valueOf22, valueOf22, null);
        Long valueOf24 = Long.valueOf(RemoteConfigManager.MIN_APP_START_CONFIG_FETCH_DELAY_MS);
        zzI = zza("measurement.service_client.idle_disconnect_millis", valueOf24, valueOf24, zzbo.zza);
        Boolean bool = Boolean.FALSE;
        zzJ = zza("measurement.test.boolean_flag", bool, bool, zzbp.zza);
        Long valueOf25 = Long.valueOf(-1);
        zzL = zza("measurement.test.long_flag", valueOf25, valueOf25, zzbr.zza);
        Integer valueOf26 = Integer.valueOf(-2);
        zzM = zza("measurement.test.int_flag", valueOf26, valueOf26, zzbs.zza);
        Double valueOf27 = Double.valueOf(-3.0d);
        zzN = zza("measurement.test.double_flag", valueOf27, valueOf27, zzbu.zza);
        Integer valueOf28 = Integer.valueOf(50);
        zzO = zza("measurement.experiment.max_ids", valueOf28, valueOf28, zzbv.zza);
        zzP = zza("measurement.max_bundles_per_iteration", valueOf4, valueOf4, zzbw.zza);
        zzQ = zza("measurement.sdk.attribution.cache.ttl", valueOf15, valueOf15, zzbx.zza);
        Long valueOf29 = Long.valueOf(7200000);
        zzR = zza("measurement.redaction.app_instance_id.ttl", valueOf29, valueOf29, zzbz.zza);
        Boolean bool2 = Boolean.TRUE;
        zzS = zza("measurement.validation.internal_limits_internal_event_params", bool2, bool2, zzca.zza);
        zzT = zza("measurement.collection.log_event_and_bundle_v2", bool2, bool2, zzcb.zza);
        zzU = zza("measurement.quality.checksum", bool, bool, null);
        zzV = zza("measurement.audience.use_bundle_end_timestamp_for_non_sequence_property_filters", bool, bool, zzcc.zza);
        zzW = zza("measurement.audience.refresh_event_count_filters_timestamp", bool, bool, zzcd.zza);
        zzX = zza("measurement.audience.use_bundle_timestamp_for_event_count_filters", bool, bool, zzcf.zza);
        zzY = zza("measurement.sdk.collection.retrieve_deeplink_from_bow_2", bool2, bool2, zzcg.zza);
        zzZ = zza("measurement.sdk.collection.last_deep_link_referrer_campaign2", bool, bool, zzch.zza);
        zzaa = zza("measurement.lifecycle.app_in_background_parameter", bool, bool, zzci.zza);
        zzab = zza("measurement.integration.disable_firebase_instance_id", bool, bool, zzcj.zza);
        zzac = zza("measurement.collection.service.update_with_analytics_fix", bool, bool, zzcl.zza);
        zzad = zza("measurement.client.firebase_feature_rollout.v1.enable", bool2, bool2, zzcm.zza);
        zzae = zza("measurement.client.sessions.check_on_reset_and_enable2", bool2, bool2, zzcn.zza);
        zzaf = zza("measurement.scheduler.task_thread.cleanup_on_exit", bool, bool, zzco.zza);
        zza("measurement.collection.synthetic_data_mitigation", bool, bool, zzcq.zza);
        zzah = zza("measurement.androidId.delete_feature", bool2, bool2, zzcr.zza);
        Integer valueOf30 = Integer.valueOf(203600);
        zzai = zza("measurement.service.storage_consent_support_version", valueOf30, valueOf30, zzcs.zza);
        zza("measurement.client.click_identifier_control.dev", bool, bool, zzct.zza);
        zza("measurement.service.click_identifier_control", bool, bool, zzcu.zza);
        zzal = zza("measurement.client.consent.gmpappid_worker_thread_fix", bool2, bool2, zzcv.zza);
        zzam = zza("measurement.module.pixie.fix_array", bool2, bool2, zzcx.zza);
        zzan = zza("measurement.adid_zero.service", bool2, bool2, zzcy.zza);
        zzao = zza("measurement.adid_zero.remove_lair_if_adidzero_false", bool2, bool2, zzcz.zza);
        zzap = zza("measurement.adid_zero.remove_lair_if_userid_cleared", bool2, bool2, zzdb.zza);
        zzaq = zza("measurement.adid_zero.remove_lair_on_id_value_change_only", bool2, bool2, zzdc.zza);
        zzar = zza("measurement.adid_zero.adid_uid", bool2, bool2, zzdd.zza);
        zzas = zza("measurement.adid_zero.app_instance_id_fix", bool2, bool2, zzde.zza);
        zzat = zza("measurement.service.refactor.package_side_screen", bool2, bool2, zzdf.zza);
        zzau = zza("measurement.enhanced_campaign.service", bool2, bool2, zzdg.zza);
        zzav = zza("measurement.enhanced_campaign.client", bool2, bool2, zzdh.zza);
        zzaw = zza("measurement.enhanced_campaign.srsltid.client", bool, bool, zzdj.zza);
        zzax = zza("measurement.enhanced_campaign.srsltid.service", bool, bool, zzdk.zza);
        zzay = zza("measurement.service.store_null_safelist", bool2, bool2, zzdm.zza);
        zzaz = zza("measurement.service.store_safelist", bool2, bool2, zzdn.zza);
        zzaA = zza("measurement.redaction.no_aiid_in_config_request", bool2, bool2, zzdo.zza);
        zzaB = zza("measurement.redaction.config_redacted_fields", bool2, bool2, zzdp.zza);
        zzaC = zza("measurement.redaction.upload_redacted_fields", bool2, bool2, zzdq.zza);
        zzaD = zza("measurement.redaction.upload_subdomain_override", bool2, bool2, zzdr.zza);
        zzaE = zza("measurement.redaction.device_info", bool2, bool2, zzds.zza);
        zzaF = zza("measurement.redaction.user_id", bool2, bool2, zzdt.zza);
        zzaG = zza("measurement.redaction.google_signals", bool2, bool2, zzdv.zza);
        zzaH = zza("measurement.collection.enable_session_stitching_token.service", bool, bool, zzdx.zza);
        zzaI = zza("measurement.collection.enable_session_stitching_token.client.dev", bool, bool, zzdy.zza);
        zzaJ = zza("measurement.redaction.app_instance_id", bool2, bool2, zzdz.zza);
        zzaK = zza("measurement.redaction.populate_ephemeral_app_instance_id", bool2, bool2, zzea.zza);
        zzaL = zza("measurement.redaction.enhanced_uid", bool2, bool2, zzeb.zza);
        zzaM = zza("measurement.redaction.e_tag", bool2, bool2, zzec.zza);
        zzaN = zza("measurement.redaction.client_ephemeral_aiid_generation", bool2, bool2, zzed.zza);
    }

    @VisibleForTesting
    public static zzek zza(String str, Object obj, Object obj2, zzeh zzeh) {
        zzek zzek = new zzek(str, obj, obj2, zzeh, null);
        zzaO.add(zzek);
        return zzek;
    }

    public static Map zzc(Context context) {
        zzhe zza2 = zzhe.zza(context.getContentResolver(), zzho.zza("com.google.android.gms.measurement"));
        return zza2 == null ? Collections.emptyMap() : zza2.zzc();
    }
}
